"""
Django settings for conversations project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
# pylint: disable=too-many-lines

import os
import tomllib
from socket import gethostbyname, gethostname

from django.utils.functional import lazy

import posthog
import sentry_sdk
from configurations import Configuration, pristinemethod, values
from corsheaders.defaults import default_headers
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import ignore_logger

from core.feature_flags.flags import FeatureFlags, FeatureToggle

from chat.llm_configuration import cached_load_llm_configuration, load_llm_configuration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_DIR = os.getenv("DATA_DIR", os.path.join("/", "data"))


def get_release():
    """
    Get the current release of the application
    """
    try:
        with open(os.path.join(BASE_DIR, "pyproject.toml"), "rb") as f:
            pyproject_data = tomllib.load(f)
        return pyproject_data["project"]["version"]
    except (FileNotFoundError, KeyError):
        return "NA"  # Default: not available


class Base(Configuration):
    """
    This is the base configuration every configuration (aka environment) should inherit from. It
    is recommended to configure third-party applications by creating a configuration mixins in
    ./configurations and compose the Base configuration with those mixins.

    It depends on an environment variable that SHOULD be defined:

    * DJANGO_SECRET_KEY

    You may also want to override default configuration by setting the following environment
    variables:

    * SENTRY_DSN
    * DB_NAME
    * DB_HOST
    * DB_PASSWORD
    * DB_USER
    """

    DEBUG = False
    USE_SWAGGER = False

    API_VERSION = "v1.0"

    # Security
    ALLOWED_HOSTS = values.ListValue([])
    SECRET_KEY = values.Value(None)
    SERVER_TO_SERVER_API_TOKENS = values.ListValue([])

    # Application definition
    ROOT_URLCONF = "conversations.urls"
    WSGI_APPLICATION = "conversations.wsgi.application"

    # Database
    DATABASES = {
        "default": {
            "ENGINE": values.Value(
                "django.db.backends.postgresql_psycopg2",
                environ_name="DB_ENGINE",
                environ_prefix=None,
            ),
            "NAME": values.Value("conversations", environ_name="DB_NAME", environ_prefix=None),
            "USER": values.Value("dinum", environ_name="DB_USER", environ_prefix=None),
            "PASSWORD": values.Value("pass", environ_name="DB_PASSWORD", environ_prefix=None),
            "HOST": values.Value("localhost", environ_name="DB_HOST", environ_prefix=None),
            "PORT": values.Value(5432, environ_name="DB_PORT", environ_prefix=None),
        }
    }
    DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

    # Static files (CSS, JavaScript, Images)
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(DATA_DIR, "static")
    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(DATA_DIR, "media")
    MEDIA_BASE_URL = values.Value(None, environ_name="MEDIA_BASE_URL", environ_prefix=None)

    SITE_ID = 1

    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": values.Value(
                "whitenoise.storage.CompressedManifestStaticFilesStorage",
                environ_name="STORAGES_STATICFILES_BACKEND",
            ),
        },
    }

    # Internationalization
    # https://docs.djangoproject.com/en/3.1/topics/i18n/

    # Languages
    LANGUAGE_CODE = values.Value("en-us")
    # cookie & language is set from frontend
    LANGUAGE_COOKIE_NAME = "conversation_language"
    LANGUAGE_COOKIE_PATH = "/"

    DRF_NESTED_MULTIPART_PARSER = {
        # output of parser is converted to querydict
        # if is set to False, dict python is returned
        "querydict": False,
    }

    # Careful! Languages should be ordered by priority, as this tuple is used to get
    # fallback/default languages throughout the app.
    LANGUAGES = values.SingleNestedTupleValue(
        (
            ("en-us", "English"),
            ("fr-fr", "Fran√ßais"),
            # ("de-de", "Deutsch"),
            # ("nl-nl", "Nederlands"),
            # ("es-es", "Espa√±ol"),
        )
    )

    LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

    TIME_ZONE = "UTC"
    USE_I18N = True
    USE_TZ = True

    # Templates
    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [os.path.join(BASE_DIR, "templates")],
            "OPTIONS": {
                "context_processors": [
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "django.template.context_processors.csrf",
                    "django.template.context_processors.debug",
                    "django.template.context_processors.i18n",
                    "django.template.context_processors.media",
                    "django.template.context_processors.request",
                    "django.template.context_processors.tz",
                ],
                "loaders": [
                    "django.template.loaders.filesystem.Loader",
                    "django.template.loaders.app_directories.Loader",
                ],
            },
        },
    ]

    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "whitenoise.middleware.WhiteNoiseMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.locale.LocaleMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "posthog.integrations.django.PosthogContextMiddleware",
        "core.middleware.PostHogMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "dockerflow.django.middleware.DockerflowMiddleware",
    ]

    AUTHENTICATION_BACKENDS = [
        "django.contrib.auth.backends.ModelBackend",
        "core.authentication.backends.OIDCAuthenticationBackend",
    ]

    # Django applications from the highest priority to the lowest
    INSTALLED_APPS = [
        "chat",
        "core",
        "demo",
        "drf_spectacular",
        # Third party apps
        "corsheaders",
        "django_filters",
        "dockerflow.django",
        "rest_framework",
        "parler",
        "easy_thumbnails",
        # Django
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.postgres",
        "django.contrib.sessions",
        "django.contrib.sites",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        # OIDC third party
        "mozilla_django_oidc",
    ]

    # Cache
    CACHES = {
        "default": {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"},
    }

    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES": (
            "mozilla_django_oidc.contrib.drf.OIDCAuthentication",
            "rest_framework.authentication.SessionAuthentication",
        ),
        "DEFAULT_PARSER_CLASSES": [
            "rest_framework.parsers.JSONParser",
            "nested_multipart_parser.drf.DrfNestedParser",
        ],
        "DEFAULT_RENDERER_CLASSES": [
            # üîíÔ∏è Disable BrowsableAPIRenderer which provides forms allowing a user to
            # see all the data in the database (ie a serializer with a ForeignKey field
            # will generate a form with a field with all possible values of the FK).
            "rest_framework.renderers.JSONRenderer",
        ],
        "EXCEPTION_HANDLER": "core.api.exception_handler",
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
        "PAGE_SIZE": 20,
        "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
        "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
        "DEFAULT_THROTTLE_RATES": {
            "user_list_sustained": values.Value(
                default="180/hour",
                environ_name="API_USERS_LIST_THROTTLE_RATE_SUSTAINED",
                environ_prefix=None,
            ),
            "user_list_burst": values.Value(
                default="30/minute",
                environ_name="API_USERS_LIST_THROTTLE_RATE_BURST",
                environ_prefix=None,
            ),
        },
    }

    SPECTACULAR_SETTINGS = {
        "TITLE": "Conversations API",
        "DESCRIPTION": "This is the conversations API schema.",
        "VERSION": "1.0.0",
        "SERVE_INCLUDE_SCHEMA": False,
        "ENABLE_DJANGO_DEPLOY_CHECK": values.BooleanValue(
            default=False,
            environ_name="SPECTACULAR_SETTINGS_ENABLE_DJANGO_DEPLOY_CHECK",
        ),
        "COMPONENT_SPLIT_REQUEST": True,
        # OTHER SETTINGS
        "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
        "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
        "REDOC_DIST": "SIDECAR",
    }

    # Mail
    EMAIL_BACKEND = values.Value("django.core.mail.backends.smtp.EmailBackend")
    EMAIL_BRAND_NAME = values.Value(None)
    EMAIL_HOST = values.Value(None)
    EMAIL_HOST_USER = values.Value(None)
    EMAIL_HOST_PASSWORD = values.Value(None)
    EMAIL_LOGO_IMG = values.Value(None)
    EMAIL_PORT = values.PositiveIntegerValue(None)
    EMAIL_USE_TLS = values.BooleanValue(False)
    EMAIL_USE_SSL = values.BooleanValue(False)
    EMAIL_FROM = values.Value("from@example.com")

    AUTH_USER_MODEL = "core.User"

    # CORS
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_ALL_ORIGINS = values.BooleanValue(False)
    CORS_ALLOWED_ORIGINS = values.ListValue([])
    CORS_ALLOWED_ORIGIN_REGEXES = values.ListValue([])
    CORS_ALLOW_HEADERS = values.ListValue(
        [
            "x-posthog-distinct-id",
            "x-posthog-session-id",
        ],
        environ_name="CORS_ALLOW_HEADERS",
    ) + list(default_headers)

    # Sentry
    SENTRY_DSN = values.Value(None, environ_name="SENTRY_DSN", environ_prefix=None)

    # Frontend
    FRONTEND_THEME = values.Value(None, environ_name="FRONTEND_THEME", environ_prefix=None)
    FRONTEND_HOMEPAGE_FEATURE_ENABLED = values.BooleanValue(
        default=True,
        environ_name="FRONTEND_HOMEPAGE_FEATURE_ENABLED",
        environ_prefix=None,
    )
    FRONTEND_CSS_URL = values.Value(None, environ_name="FRONTEND_CSS_URL", environ_prefix=None)

    THEME_CUSTOMIZATION_FILE_PATH = values.Value(
        os.path.join(BASE_DIR, "conversations/configuration/theme/default.json"),
        environ_name="THEME_CUSTOMIZATION_FILE_PATH",
        environ_prefix=None,
    )

    THEME_CUSTOMIZATION_CACHE_TIMEOUT = values.Value(
        60 * 60 * 24,
        environ_name="THEME_CUSTOMIZATION_CACHE_TIMEOUT",
        environ_prefix=None,
    )

    # Posthog
    # Looks like "{'id': 'posthog_key', 'host': 'https://product.conversations.127.0.0.1.nip.io'}"
    POSTHOG_KEY = values.DictValue(None, environ_name="POSTHOG_KEY", environ_prefix=None)
    POSTHOG_MW_CAPTURE_EXCEPTIONS = values.BooleanValue(
        default=False, environ_name="POSTHOG_MW_CAPTURE_EXCEPTIONS", environ_prefix=None
    )

    # Crisp
    CRISP_WEBSITE_ID = values.Value(None, environ_name="CRISP_WEBSITE_ID", environ_prefix=None)

    # Easy thumbnails
    THUMBNAIL_EXTENSION = "webp"
    THUMBNAIL_TRANSPARENCY_EXTENSION = "webp"
    THUMBNAIL_DEFAULT_STORAGE_ALIAS = "default"
    THUMBNAIL_ALIASES = {}

    # Session
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
    SESSION_COOKIE_AGE = values.PositiveIntegerValue(
        default=60 * 60 * 12, environ_name="SESSION_COOKIE_AGE", environ_prefix=None
    )

    # OIDC - Authorization Code Flow
    OIDC_CREATE_USER = values.BooleanValue(
        default=True,
        environ_name="OIDC_CREATE_USER",
    )
    OIDC_RP_SIGN_ALGO = values.Value("RS256", environ_name="OIDC_RP_SIGN_ALGO", environ_prefix=None)
    OIDC_RP_CLIENT_ID = values.Value(
        "conversations", environ_name="OIDC_RP_CLIENT_ID", environ_prefix=None
    )
    OIDC_RP_CLIENT_SECRET = values.Value(
        None,
        environ_name="OIDC_RP_CLIENT_SECRET",
        environ_prefix=None,
    )
    OIDC_OP_JWKS_ENDPOINT = values.Value(environ_name="OIDC_OP_JWKS_ENDPOINT", environ_prefix=None)
    OIDC_OP_AUTHORIZATION_ENDPOINT = values.Value(
        environ_name="OIDC_OP_AUTHORIZATION_ENDPOINT", environ_prefix=None
    )
    OIDC_OP_TOKEN_ENDPOINT = values.Value(
        None, environ_name="OIDC_OP_TOKEN_ENDPOINT", environ_prefix=None
    )
    OIDC_OP_USER_ENDPOINT = values.Value(
        None, environ_name="OIDC_OP_USER_ENDPOINT", environ_prefix=None
    )
    OIDC_OP_LOGOUT_ENDPOINT = values.Value(
        None, environ_name="OIDC_OP_LOGOUT_ENDPOINT", environ_prefix=None
    )
    OIDC_AUTH_REQUEST_EXTRA_PARAMS = values.DictValue(
        {}, environ_name="OIDC_AUTH_REQUEST_EXTRA_PARAMS", environ_prefix=None
    )
    OIDC_RP_SCOPES = values.Value(
        "openid email", environ_name="OIDC_RP_SCOPES", environ_prefix=None
    )
    LOGIN_REDIRECT_URL = values.Value(None, environ_name="LOGIN_REDIRECT_URL", environ_prefix=None)
    LOGIN_REDIRECT_URL_FAILURE = values.Value(
        None, environ_name="LOGIN_REDIRECT_URL_FAILURE", environ_prefix=None
    )
    LOGOUT_REDIRECT_URL = values.Value(
        None, environ_name="LOGOUT_REDIRECT_URL", environ_prefix=None
    )
    OIDC_USE_NONCE = values.BooleanValue(
        default=True, environ_name="OIDC_USE_NONCE", environ_prefix=None
    )
    OIDC_REDIRECT_REQUIRE_HTTPS = values.BooleanValue(
        default=False, environ_name="OIDC_REDIRECT_REQUIRE_HTTPS", environ_prefix=None
    )
    OIDC_REDIRECT_ALLOWED_HOSTS = values.ListValue(
        default=[], environ_name="OIDC_REDIRECT_ALLOWED_HOSTS", environ_prefix=None
    )
    OIDC_STORE_ID_TOKEN = values.BooleanValue(
        default=True, environ_name="OIDC_STORE_ID_TOKEN", environ_prefix=None
    )
    OIDC_FALLBACK_TO_EMAIL_FOR_IDENTIFICATION = values.BooleanValue(
        default=True,
        environ_name="OIDC_FALLBACK_TO_EMAIL_FOR_IDENTIFICATION",
        environ_prefix=None,
    )
    OIDC_USE_PKCE = values.BooleanValue(
        default=False, environ_name="OIDC_USE_PKCE", environ_prefix=None
    )
    OIDC_PKCE_CODE_CHALLENGE_METHOD = values.Value(
        default="S256",
        environ_name="OIDC_PKCE_CODE_CHALLENGE_METHOD",
        environ_prefix=None,
    )
    OIDC_PKCE_CODE_VERIFIER_SIZE = values.IntegerValue(
        default=64, environ_name="OIDC_PKCE_CODE_VERIFIER_SIZE", environ_prefix=None
    )
    OIDC_STORE_ACCESS_TOKEN = values.BooleanValue(
        default=False, environ_name="OIDC_STORE_ACCESS_TOKEN", environ_prefix=None
    )
    OIDC_STORE_REFRESH_TOKEN = values.BooleanValue(
        default=False, environ_name="OIDC_STORE_REFRESH_TOKEN", environ_prefix=None
    )
    OIDC_STORE_REFRESH_TOKEN_KEY = values.Value(
        default=None,
        environ_name="OIDC_STORE_REFRESH_TOKEN_KEY",
        environ_prefix=None,
    )

    # WARNING: Enabling this setting allows multiple user accounts to share the same email
    # address. This may cause security issues and is not recommended for production use when
    # email is activated as fallback for identification (see previous setting).
    OIDC_ALLOW_DUPLICATE_EMAILS = values.BooleanValue(
        default=False,
        environ_name="OIDC_ALLOW_DUPLICATE_EMAILS",
        environ_prefix=None,
    )

    USER_OIDC_ESSENTIAL_CLAIMS = values.ListValue(
        default=[], environ_name="USER_OIDC_ESSENTIAL_CLAIMS", environ_prefix=None
    )

    OIDC_USERINFO_FULLNAME_FIELDS = values.ListValue(
        default=["first_name", "last_name"],
        environ_name="OIDC_USERINFO_FULLNAME_FIELDS",
        environ_prefix=None,
    )
    OIDC_USERINFO_SHORTNAME_FIELD = values.Value(
        default="first_name",
        environ_name="OIDC_USERINFO_SHORTNAME_FIELD",
        environ_prefix=None,
    )

    ALLOW_LOGOUT_GET_METHOD = values.BooleanValue(
        default=True, environ_name="ALLOW_LOGOUT_GET_METHOD", environ_prefix=None
    )

    # AI service
    _llm_configuration_file_path = values.Value(
        os.path.join(BASE_DIR, "conversations/configuration/llm/default.json"),
        environ_name="LLM_CONFIGURATION_FILE_PATH",
        environ_prefix=None,
    )
    LLM_DEFAULT_MODEL_HRID = values.Value(
        "default-model", environ_name="LLM_DEFAULT_MODEL_HRID", environ_prefix=None
    )
    LLM_ROUTING_MODEL_HRID = values.Value(
        "default-routing-model", environ_name="LLM_ROUTING_MODEL_HRID", environ_prefix=None
    )

    # These settings are default values used in the default LLM_CONFIGURATIONS
    # They allow a deployment with only one model without a specific configuration file
    AI_API_KEY = values.Value(None, environ_name="AI_API_KEY", environ_prefix=None)
    AI_BASE_URL = values.Value(None, environ_name="AI_BASE_URL", environ_prefix=None)
    AI_MODEL = values.Value(None, environ_name="AI_MODEL", environ_prefix=None)
    AI_AGENT_INSTRUCTIONS = values.Value(
        (
            "You are a helpful assistant. "
            "Escape formulas or any math notation between `$$`, "
            "like `$$x^2 + y^2 = z^2$$` or `$$C_l$$`. "
            "You can use Markdown to format your answers. "
        ),
        environ_name="AI_AGENT_INSTRUCTIONS",
        environ_prefix=None,
    )

    AI_ROUTING_MODEL = values.Value(None, environ_name="AI_ROUTING_MODEL", environ_prefix=None)
    AI_ROUTING_MODEL_BASE_URL = values.Value(
        values.Value(None, environ_name="AI_BASE_URL", environ_prefix=None),
        environ_name="AI_ROUTING_MODEL_BASE_URL",
        environ_prefix=None,
    )
    AI_ROUTING_MODEL_API_KEY = values.Value(
        values.Value(None, environ_name="AI_API_KEY", environ_prefix=None),
        environ_name="AI_ROUTING_MODEL_API_KEY",
        environ_prefix=None,
    )
    AI_ROUTING_SYSTEM_PROMPT = values.Value(
        "Your only job is to detect the following user intents based on the user's request:\n"
        "\n"
        " - `web_search`: Make `True` this intent only if the user explicitly asks for recent,"
        " precise, or up-to-date information about a specific topic, or if web research is "
        " required to provide context before answering."
        " Do not trigger this intent for generic or trivial questions, or when the answer"
        " does not require updated data (e.g., 'what is the date today', 'rewrite this for me').\n"
        "\n"
        " - `attachment_summary`: Make `True` this intent if the user requests, explicitly or"
        " implicitly, a summary of a document or file. Any wording such as"
        ' "summary", "overview", "highlights", "key points", or similar should activate this'
        " intent.",
        environ_name="AI_ROUTING_SYSTEM_PROMPT",
        environ_prefix=None,
    )

    # Tools
    AI_AGENT_TOOLS = values.ListValue(
        default=[],
        environ_name="AI_AGENT_TOOLS",
        environ_prefix=None,
    )

    # Uploaded files
    RAG_FILES_ACCEPTED_FORMATS = values.ListValue(
        default=[
            # docx files
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            # pptx files
            "application/vnd.openxmlformats-officedocument.presentationml",
            # xlsx and xls files
            "application/vnd.ms-excel",
            "application/excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            # txt and csv files
            "text/plain",
            "text/csv",
            "application/csv",
            # pdf files
            "application/pdf",
            # html files
            "text/html",
            "application/xhtml+xml",
            # markdown files
            "text/markdown",
            "application/markdown",
            "application/x-markdown",
            # outlook msg files
            "application/vnd.ms-outlook",
            # images
            "image/jpeg",
            "image/png",
            "image/gif",
            "image/webp",
        ],
        environ_name="RAG_FILES_ACCEPTED_FORMATS",
        environ_prefix=None,
    )

    # Documents
    ALBERT_API_PARSE_TIMEOUT = values.PositiveIntegerValue(
        default=120,  # seconds
        environ_name="ALBERT_API_PARSE_TIMEOUT",
        environ_prefix=None,
    )
    RAG_DOCUMENT_SEARCH_BACKEND = values.Value(
        "chat.agent_rag.document_search.albert_api.AlbertRagDocumentSearch",
        environ_name="RAG_DOCUMENT_SEARCH_BACKEND",
        environ_prefix=None,
    )

    # Web search
    RAG_WEB_SEARCH_BACKEND = values.Value(
        # "chat.agent_rag.web_search.albert_api.AlbertWebSearchManager",
        "chat.agent_rag.web_search.mocked.MockedWebSearchManager",
        environ_name="RAG_WEB_SEARCH_BACKEND",
        environ_prefix=None,
    )
    RAG_WEB_SEARCH_PROMPT_UPDATE = values.Value(
        """
You are a subject-matter expert assistant. 
You are given :
 - web search result(s) or raw webpage text that may contain navigation, menus, comments, 
   category names, and other unrelated page details.
 - document(s) that may contain text, images, and metadata, formatted in markdown.

**Your mission:**
- Use ONLY the main informational content that directly and factually answers the user's explicit 
  question.
- *Completely ignore and do NOT mention* any of the following in your answer:
    - Web page or site structure
    - Navigation elements, headers, menus, search bars, categories
    - Lists of links, footers, or any site design features
    - Any meta-observations about how the content is organized
- NEVER include sections titled ‚ÄúWebsite Structure‚Äù, ‚ÄúFormat‚Äù, ‚ÄúLayout‚Äù, or similar.
- NEVER narrate, summarize, or analyze how the website is arranged or how links are presented.
- If given a block of mixed web text, locate the relevant information AT THE SENTENCE LEVEL; 
  include ONLY those sentences (possibly paraphrased) that respond to the user‚Äôs direct question.
- If the relevant answer cannot be found in the content, simply state: ‚ÄúThe provided content 
  does not contain information directly answering the question.‚Äù Do not speculate or elaborate.

#### Example output:

> - John Doe criticized Jane the prime minister for "the absence of consultation" with other 
    political forces regarding the 2025 the government budget, focusing on economic policy and 
    spending plans.
> - The country unemployment insurance system is noted as more generous than other neighbor's 
    systems.
> - [If more is needed, continue, but only with factual statements explicitly present in the 
    provided content. Stop when unrelated content begins.]

**Do NOT:**
- Discuss the page‚Äôs design, link structure, main/secondary categories, branding, or site 
  navigation tools.
- Invent summaries for structure or offer general commentary about the website.

{search_results}

USER QUESTION:

{user_prompt}
        """,
        environ_name="RAG_WEB_SEARCH_PROMPT_UPDATE",
        environ_prefix=None,
    )
    RAG_WEB_SEARCH_MAX_RESULTS = values.PositiveIntegerValue(
        default=5,
        environ_name="RAG_WEB_SEARCH_MAX_RESULTS",
        environ_prefix=None,
    )
    RAG_WEB_SEARCH_CHUNK_NUMBER = values.PositiveIntegerValue(
        default=4,
        environ_name="RAG_WEB_SEARCH_CHUNK_NUMBER",
        environ_prefix=None,
    )

    # Tavily API
    TAVILY_API_KEY = values.Value(
        None,  # Tavily API key is not set by default
        environ_name="TAVILY_API_KEY",
        environ_prefix=None,
    )
    TAVILY_MAX_RESULTS = values.PositiveIntegerValue(
        default=5,
        environ_name="TAVILY_MAX_RESULTS",
        environ_prefix=None,
    )
    TAVILY_API_TIMEOUT = values.PositiveIntegerValue(
        default=10,  # seconds
        environ_name="TAVILY_API_TIMEOUT",
        environ_prefix=None,
    )

    # Albert API
    ALBERT_API_KEY = values.Value(
        None,  # Albert API key is not set by default
        environ_name="ALBERT_API_KEY",
        environ_prefix=None,
    )
    ALBERT_API_URL = values.Value(
        "https://albert.api.etalab.gouv.fr",  # Default Albert API URL
        environ_name="ALBERT_API_URL",
        environ_prefix=None,
    )
    ALBERT_API_TIMEOUT = values.PositiveIntegerValue(
        default=10,  # seconds
        environ_name="ALBERT_API_TIMEOUT",
        environ_prefix=None,
    )

    # Logging
    # We want to make it easy to log to console but by default we log production
    # to Sentry and don't want to log to console.
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "simple": {
                "format": "{asctime} {name} {levelname} {message}",
                "style": "{",
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "simple",
            },
        },
        # Override root logger to send it to console
        "root": {
            "handlers": ["console"],
            "level": values.Value(
                "INFO", environ_name="LOGGING_LEVEL_LOGGERS_ROOT", environ_prefix=None
            ),
        },
        "loggers": {
            "core": {
                "handlers": ["console"],
                "level": values.Value(
                    "INFO",
                    environ_name="LOGGING_LEVEL_LOGGERS_APP",
                    environ_prefix=None,
                ),
                "propagate": False,
            },
            "conversations.security": {
                "handlers": ["console"],
                "level": values.Value(
                    "INFO",
                    environ_name="LOGGING_LEVEL_LOGGERS_SECURITY",
                    environ_prefix=None,
                ),
                "propagate": False,
            },
        },
    }

    API_USERS_LIST_LIMIT = values.PositiveIntegerValue(
        default=5,
        environ_name="API_USERS_LIST_LIMIT",
        environ_prefix=None,
    )

    # ML Flow
    ML_FLOW_TRACKING_URI = values.Value(
        None,
        environ_name="ML_FLOW_TRACKING_URI",
        environ_prefix=None,
    )
    ML_FLOW_EXPERIMENT_NAME = values.Value(
        "conversations-openai-tracing",
        environ_name="ML_FLOW_EXPERIMENT_NAME",
        environ_prefix=None,
    )

    # pylint: disable=invalid-name
    @property
    def ENVIRONMENT(self):
        """Environment in which the application is launched."""
        return self.__class__.__name__.lower()

    # pylint: disable=invalid-name
    @property
    def RELEASE(self):
        """
        Return the release information.

        Delegate to the module function to enable easier testing.
        """
        return get_release()

    # pylint: disable=invalid-name
    @property
    def PARLER_LANGUAGES(self):
        """
        Return languages for Parler computed from the LANGUAGES and LANGUAGE_CODE settings.
        """
        return {
            self.SITE_ID: tuple({"code": code} for code, _name in self.LANGUAGES),
            "default": {
                "fallbacks": [self.LANGUAGE_CODE],
                "hide_untranslated": False,
            },
        }

    @property
    def FEATURE_FLAGS(self) -> FeatureFlags:  # pylint: disable=invalid-name
        """
        Return a dictionary of feature flags for the application.
        This can be used to enable or disable features dynamically.
        """
        features = FeatureFlags(
            **{
                field_name: FeatureToggle[
                    values.Value(
                        field.default.name,
                        environ_name=f"FEATURE_FLAG_{field_name.upper()}",
                        environ_prefix=None,
                    )
                ]
                for field_name, field in FeatureFlags.model_fields.items()
            }
        )

        # Sanity check to ensure that the RAG_WEB_SEARCH_BACKEND and RAG_DOCUMENT_SEARCH_BACKEND
        if features.web_search and not self.RAG_WEB_SEARCH_BACKEND:
            raise RuntimeError(
                "RAG_WEB_SEARCH_BACKEND is not set, but web_search feature flag is enabled."
            )

        if features.document_upload and not self.RAG_DOCUMENT_SEARCH_BACKEND:
            raise RuntimeError(
                "RAG_DOCUMENT_SEARCH_BACKEND is not set, "
                "but document_upload feature flag is enabled."
            )

        return features

    @property
    def LLM_CONFIGURATIONS(self):
        """
        Return the LLM configuration loaded from the configuration file.

        The configuration is lazy loaded to allow settings access and settings update in tests.
        """
        return lazy(load_llm_configuration, dict)(self._llm_configuration_file_path)

    @pristinemethod
    def POSTHOG_MW_REQUEST_FILTER(self, request):  # pylint: disable=bad-staticmethod-argument, invalid-name, unused-argument
        """Return a function that filters requests to be sent to Posthog."""
        return not request.path.startswith(
            (
                "/__heartbeat__",
                "/__lbheartbeat__",
                "/admin",
            )
        )

    @pristinemethod
    def POSTHOG_MW_EXTRA_TAGS(self, request):  # pylint: disable=bad-staticmethod-argument, invalid-name, unused-argument
        """Return extra tags to be sent to Posthog."""
        return {
            "$host": request.get_host(),
            "$environment": self.ENVIRONMENT,
            "$release": self.RELEASE,
        }

    @classmethod
    def post_setup(cls):
        """Post setup configuration.
        This is the place where you can configure settings that require other
        settings to be loaded.
        """
        super().post_setup()

        # The SENTRY_DSN setting should be available to activate sentry for an environment
        if cls.SENTRY_DSN is not None:
            sentry_sdk.init(
                dsn=cls.SENTRY_DSN,
                environment=cls.__name__.lower(),
                release=get_release(),
                integrations=[DjangoIntegration()],
            )
            sentry_sdk.set_tag("application", "backend")

            # Ignore the logs added by the DockerflowMiddleware
            ignore_logger("request.summary")

        # Enable Posthog if the key is set
        if cls.POSTHOG_KEY:
            posthog.api_key = cls.POSTHOG_KEY["id"]
            posthog.host = cls.POSTHOG_KEY["host"]

        if cls.OIDC_FALLBACK_TO_EMAIL_FOR_IDENTIFICATION and cls.OIDC_ALLOW_DUPLICATE_EMAILS:
            raise ValueError(
                "Both OIDC_FALLBACK_TO_EMAIL_FOR_IDENTIFICATION and "
                "OIDC_ALLOW_DUPLICATE_EMAILS cannot be set to True simultaneously. "
            )


class Build(Base):
    """Settings used when the application is built.

    This environment should not be used to run the application. Just to build it with non-blocking
    settings.
    """

    SECRET_KEY = values.Value("DummyKey")


class Development(Base):
    """
    Development environment settings

    We set DEBUG to True and configure the server to respond from all hosts.
    """

    ALLOWED_HOSTS = ["*"]
    CORS_ALLOW_ALL_ORIGINS = True
    CSRF_TRUSTED_ORIGINS = ["http://localhost:8072", "http://localhost:3000"]
    DEBUG = True

    SESSION_COOKIE_NAME = "conversations_sessionid"

    USE_SWAGGER = True
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": values.Value(
                "redis://redis:6379/2",
                environ_name="REDIS_URL",
                environ_prefix=None,
            ),
            "TIMEOUT": values.IntegerValue(
                30,  # timeout in seconds
                environ_name="CACHES_DEFAULT_TIMEOUT",
                environ_prefix=None,
            ),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        },
    }

    def __init__(self):
        # pylint: disable=invalid-name
        self.INSTALLED_APPS += ["django_extensions", "drf_spectacular_sidecar"]


class Test(Base):
    """Test environment settings"""

    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]
    USE_SWAGGER = True
    # Static files are not used in the test environment
    # Tests are raising warnings because the /data/static directory does not exist
    STATIC_ROOT = None

    os.environ["OPENAI_AGENTS_DISABLE_TRACING"] = "true"

    AI_BASE_URL = None
    AI_API_KEY = None
    AI_MODEL = None

    AI_ROUTING_MODEL_BASE_URL = None
    AI_ROUTING_MODEL = None
    AI_ROUTING_MODEL_API_KEY = None

    POSTHOG_KEY = None

    def __init__(self):
        # pylint: disable=invalid-name
        self.INSTALLED_APPS += ["drf_spectacular_sidecar"]

    @property
    def FEATURE_FLAGS(self) -> FeatureFlags:  # pylint: disable=invalid-name
        """
        In the test environment, we want to enable all features to test them.

        We willingly call the super to validate it works (coverage), but we override all
        the feature flags to always enabled.
        """
        _feature_flags = super().FEATURE_FLAGS

        for field_name in FeatureFlags.model_fields.keys():
            setattr(_feature_flags, field_name, FeatureToggle.ENABLED)

        return _feature_flags

    @classmethod
    def post_setup(cls):
        """Post setup configuration."""
        super().post_setup()

        # Force logger propagation to allow caplog to work
        # see https://github.com/pytest-dev/pytest/issues/3697
        cls.LOGGING["loggers"]["core"]["propagate"] = True


class ContinuousIntegration(Test):
    """
    Continuous Integration environment settings

    nota bene: it should inherit from the Test environment.
    """


class Production(Base):
    """
    Production environment settings

    You must define the ALLOWED_HOSTS environment variable in Production
    configuration (and derived configurations):
    ALLOWED_HOSTS=["foo.com", "foo.fr"]
    """

    # Security
    # Add allowed host from environment variables.
    # The machine hostname is added by default,
    # it makes the application pingable by a load balancer on the same machine by example
    ALLOWED_HOSTS = [
        *values.ListValue([], environ_name="ALLOWED_HOSTS"),
        gethostbyname(gethostname()),
    ]
    CSRF_TRUSTED_ORIGINS = values.ListValue([])
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

    # SECURE_PROXY_SSL_HEADER allows to fix the scheme in Django's HttpRequest
    # object when your application is behind a reverse proxy.
    #
    # Keep this SECURE_PROXY_SSL_HEADER configuration only if :
    # - your Django app is behind a proxy.
    # - your proxy strips the X-Forwarded-Proto header from all incoming requests
    # - Your proxy sets the X-Forwarded-Proto header and sends it to Django
    #
    # In other cases, you should comment the following line to avoid security issues.
    # SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_HSTS_SECONDS = 60
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_SSL_REDIRECT = True
    SECURE_REDIRECT_EXEMPT = [
        "^__lbheartbeat__",
        "^__heartbeat__",
    ]

    # Modern browsers require to have the `secure` attribute on cookies with `Samesite=none`
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

    # Privacy
    SECURE_REFERRER_POLICY = "same-origin"

    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": values.Value(
                "redis://redis:6379/1",
                environ_name="REDIS_URL",
                environ_prefix=None,
            ),
            "TIMEOUT": values.IntegerValue(
                30,  # timeout in seconds
                environ_name="CACHES_DEFAULT_TIMEOUT",
                environ_prefix=None,
            ),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
            "KEY_PREFIX": values.Value(
                "conversations",
                environ_name="CACHES_KEY_PREFIX",
                environ_prefix=None,
            ),
        },
    }

    @property
    def LLM_CONFIGURATIONS(self):
        """
        Return the LLM configuration loaded from the configuration file.

        The configuration is lazy loaded to allow settings access and cached to reduce footprint.
        """
        return lazy(cached_load_llm_configuration, dict)(self._llm_configuration_file_path)


class Feature(Production):
    """
    Feature environment settings

    nota bene: it should inherit from the Production environment.
    """


class Staging(Production):
    """
    Staging environment settings

    nota bene: it should inherit from the Production environment.
    """


class PreProduction(Production):
    """
    Pre-production environment settings

    nota bene: it should inherit from the Production environment.
    """


class Demo(Production):
    """
    Demonstration environment settings

    nota bene: it should inherit from the Production environment.
    """

    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
